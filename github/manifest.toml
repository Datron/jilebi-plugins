name = "github"
version = "1.0.0"
homepage = "https://github.com/github/github-mcp-server"
creator = "GitHub"
contact = "support@github.com"

[secrets]
GITHUB_TOKEN = { schema = { type = "string" } }


[resources]

[prompts.issue-to-fix-workflow]
name = "issue-to-fix-workflow"
description = "Create an issue for a problem and then generate a pull request to fix it"
arguments = [
	{ name = "owner", description = "Repository owner", required = true },
	{ name = "repo", description = "Repository name", required = true },
	{ name = "title", description = "Issue title", required = true },
	{ name = "description", description = "Issue description", required = true },
	{ name = "labels", description = "Comma-separated list of labels to apply", required = false },
	{ name = "assignees", description = "Comma-separated list of assignees", required = false },
]
messages = [
	{ role = "user", content = { type = "text", content = "You are a development workflow assistant helping to create GitHub issues and generate corresponding pull requests to fix them. You should: 1) Create a well-structured issue with clear problem description, 2) Assign it to Copilot coding agent to generate a solution, and 3) Monitor the PR creation process." } },
	{ role = "user", content = { type = "text", content = "I need to create an issue titled '{{title}}' in {{owner}}/{{repo}} and then have a PR generated to fix it. The issue description is: {{description}}{{#if labels}}\n\nLabels to apply: {{labels}}{{/if}}{{#if assignees}}\nAssignees: {{assignees}}{{/if}}" } },
	{ role = "assistant", content = { type = "text", content = "I'll help you create the issue '{{title}}' in {{owner}}/{{repo}} and then coordinate with Copilot to generate a fix. Let me start by creating the issue with the provided details." } },
]

[tools.get-me]
name = "get-me"
description = "Get information about the current authenticated user"
input_schema = { type = "object", properties = {}, required = [] }
function = "get_me"

[tools.get-me.permissions]
hosts = ["https://api.github.com"]

[tools.get-me.annotations]
title = "Get User Info"
read_only_hint = true
destructive_hint = false
idempotent_hint = true
open_world_hint = false

[tools.search-repositories]
name = "search-repositories"
description = "Search for repositories on GitHub"
input_schema = { type = "object", properties = { query = { type = "string", description = "Search query" }, sort = { type = "string", enum = [
	"stars",
	"forks",
	"help-wanted-issues",
	"updated",
], description = "Sort field" }, order = { type = "string", enum = [
	"asc",
	"desc",
], description = "Sort order" }, page = { type = "number", description = "Page number" }, per_page = { type = "number", description = "Results per page (max 100)" } }, required = [
	"query",
] }
function = "search_repositories"
[tools.search-repositories.permissions]
hosts = ["https://api.github.com"]

[tools.search-repositories.annotations]
title = "Search Repositories"
read_only_hint = true
destructive_hint = false
idempotent_hint = true
open_world_hint = false

[tools.get-file-contents]
name = "get-file-contents"
description = "Get contents of a file from a repository"
input_schema = { type = "object", properties = { owner = { type = "string", description = "Repository owner" }, repo = { type = "string", description = "Repository name" }, path = { type = "string", description = "File path" }, ref = { type = "string", description = "Branch, tag, or commit SHA" } }, required = [
	"owner",
	"repo",
	"path",
] }
function = "get_file_contents"
[tools.get-file-contents.permissions]
hosts = ["https://api.github.com"]

[tools.get-file-contents.annotations]
title = "Get File Contents"
read_only_hint = true
destructive_hint = false
idempotent_hint = true
open_world_hint = false

[tools.list-commits]
name = "list-commits"
description = "List commits in a repository"
input_schema = { type = "object", properties = { owner = { type = "string", description = "Repository owner" }, repo = { type = "string", description = "Repository name" }, sha = { type = "string", description = "SHA or branch to start listing commits from" }, path = { type = "string", description = "Only commits containing this file path will be returned" }, since = { type = "string", description = "ISO 8601 date format: YYYY-MM-DDTHH:MM:SSZ" }, until = { type = "string", description = "ISO 8601 date format: YYYY-MM-DDTHH:MM:SSZ" }, page = { type = "number", description = "Page number" }, per_page = { type = "number", description = "Results per page (max 100)" } }, required = [
	"owner",
	"repo",
] }
function = "list_commits"
[tools.list-commits.permissions]
hosts = ["https://api.github.com"]

[tools.list-commits.annotations]
title = "List Commits"
read_only_hint = true
destructive_hint = false
idempotent_hint = true
open_world_hint = false

[tools.get-commit]
name = "get-commit"
description = "Get details for a specific commit"
input_schema = { type = "object", properties = { owner = { type = "string", description = "Repository owner" }, repo = { type = "string", description = "Repository name" }, sha = { type = "string", description = "Commit SHA, branch name, or tag name" } }, required = [
	"owner",
	"repo",
	"sha",
] }
function = "get_commit"
[tools.get-commit.permissions]
hosts = ["https://api.github.com"]

[tools.get-commit.annotations]
title = "Get Commit"
read_only_hint = true
destructive_hint = false
idempotent_hint = true
open_world_hint = false

[tools.search-issues]
name = "search-issues"
description = "Search for issues across repositories"
input_schema = { type = "object", properties = { query = { type = "string", description = "Search query" }, sort = { type = "string", enum = [
	"comments",
	"reactions",
	"reactions-+1",
	"reactions--1",
	"reactions-smile",
	"reactions-thinking_face",
	"reactions-heart",
	"reactions-tada",
	"interactions",
	"created",
	"updated",
], description = "Sort field" }, order = { type = "string", enum = [
	"asc",
	"desc",
], description = "Sort order" }, page = { type = "number", description = "Page number" }, per_page = { type = "number", description = "Results per page (max 100)" } }, required = [
	"query",
] }
function = "search_issues"
[tools.search-issues.permissions]
hosts = ["https://api.github.com"]

[tools.search-issues.annotations]
title = "Search Issues"
read_only_hint = true
destructive_hint = false
idempotent_hint = true
open_world_hint = false

[tools.create-issue]
name = "create-issue"
description = "Create a new issue"
input_schema = { type = "object", properties = { owner = { type = "string", description = "Repository owner" }, repo = { type = "string", description = "Repository name" }, title = { type = "string", description = "Issue title" }, body = { type = "string", description = "Issue body" }, assignees = { type = "array", items = { type = "string" }, description = "Usernames to assign" }, milestone = { type = "number", description = "Milestone number" }, labels = { type = "array", items = { type = "string" }, description = "Labels to apply" } }, required = [
	"owner",
	"repo",
	"title",
] }
function = "create_issue"
[tools.create-issue.permissions]
hosts = ["https://api.github.com"]

[tools.create-issue.annotations]
title = "Create Issue"
read_only_hint = false
destructive_hint = false
idempotent_hint = false
open_world_hint = false

[tools.get-issue]
name = "get-issue"
description = "Get details of a specific issue"
input_schema = { type = "object", properties = { owner = { type = "string", description = "Repository owner" }, repo = { type = "string", description = "Repository name" }, issue_number = { type = "number", description = "Issue number" } }, required = [
	"owner",
	"repo",
	"issue_number",
] }
function = "get_issue"
[tools.get-issue.permissions]
hosts = ["https://api.github.com"]

[tools.get-issue.annotations]
title = "Get Issue"
read_only_hint = true
destructive_hint = false
idempotent_hint = true
open_world_hint = false

[tools.create-pull-request]
name = "create-pull-request"
description = "Create a new pull request"
input_schema = { type = "object", properties = { owner = { type = "string", description = "Repository owner" }, repo = { type = "string", description = "Repository name" }, title = { type = "string", description = "Pull request title" }, head = { type = "string", description = "Head branch" }, base = { type = "string", description = "Base branch" }, body = { type = "string", description = "Pull request body" }, maintainer_can_modify = { type = "boolean", description = "Allow maintainer edits" }, draft = { type = "boolean", description = "Create as draft" } }, required = [
	"owner",
	"repo",
	"title",
	"head",
	"base",
] }
function = "create_pull_request"
[tools.create-pull-request.permissions]
hosts = ["https://api.github.com"]

[tools.create-pull-request.annotations]
title = "Create Pull Request"
read_only_hint = false
destructive_hint = false
idempotent_hint = false
open_world_hint = false

[tools.get-pull-request]
name = "get-pull-request"
description = "Get details of a specific pull request"
input_schema = { type = "object", properties = { owner = { type = "string", description = "Repository owner" }, repo = { type = "string", description = "Repository name" }, pull_number = { type = "number", description = "Pull request number" } }, required = [
	"owner",
	"repo",
	"pull_number",
] }
function = "get_pull_request"
[tools.get-pull-request.permissions]
hosts = ["https://api.github.com"]

[tools.get-pull-request.annotations]
title = "Get Pull Request"
read_only_hint = true
destructive_hint = false
idempotent_hint = true
open_world_hint = false

[tools.list-workflows]
name = "list-workflows"
description = "List workflows in a repository"
input_schema = { type = "object", properties = { owner = { type = "string", description = "Repository owner" }, repo = { type = "string", description = "Repository name" }, page = { type = "number", description = "Page number" }, per_page = { type = "number", description = "Results per page" } }, required = [
	"owner",
	"repo",
] }
function = "list_workflows"
[tools.list-workflows.permissions]
hosts = ["https://api.github.com"]

[tools.list-workflows.annotations]
title = "List Workflows"
read_only_hint = true
destructive_hint = false
idempotent_hint = true
open_world_hint = false

[tools.list-workflow-runs]
name = "list-workflow-runs"
description = "List workflow runs"
input_schema = { type = "object", properties = { owner = { type = "string", description = "Repository owner" }, repo = { type = "string", description = "Repository name" }, workflow_id = { type = "string", description = "Workflow ID or filename" }, actor = { type = "string", description = "Filter by actor" }, branch = { type = "string", description = "Filter by branch" }, event = { type = "string", description = "Filter by event" }, status = { type = "string", enum = [
	"completed",
	"action_required",
	"cancelled",
	"failure",
	"neutral",
	"skipped",
	"stale",
	"success",
	"timed_out",
	"in_progress",
	"queued",
	"requested",
	"waiting",
], description = "Filter by status" }, page = { type = "number", description = "Page number" }, per_page = { type = "number", description = "Results per page" } }, required = [
	"owner",
	"repo",
] }
function = "list_workflow_runs"
[tools.list-workflow-runs.permissions]
hosts = ["https://api.github.com"]

[tools.list-workflow-runs.annotations]
title = "List Workflow Runs"
read_only_hint = true
destructive_hint = false
idempotent_hint = true
open_world_hint = false

[tools.create-gist]
name = "create-gist"
description = "Create a new gist"
input_schema = { type = "object", properties = { description = { type = "string", description = "Gist description" }, public = { type = "boolean", description = "Public gist" }, files = { type = "object", description = "Files to include" } }, required = [
	"public",
	"files",
] }
function = "create_gist"
[tools.create-gist.permissions]
hosts = ["https://api.github.com"]

[tools.create-gist.annotations]
title = "Create Gist"
read_only_hint = false
destructive_hint = false
idempotent_hint = false
open_world_hint = false

{"version":3,"file":"index.js","sources":["index.ts"],"sourcesContent":["\r\n/**\r\n * Grafana MCP Plugin for Jilebi\r\n * \r\n * This plugin provides comprehensive Grafana integration including:\r\n * - Dashboard management (get, update, search)\r\n * - Datasource operations (Prometheus, Loki)\r\n * - Prometheus querying and metadata\r\n * - Loki log querying and statistics\r\n * - Alerting and contact points\r\n * - Incident management\r\n * - OnCall schedule management\r\n * - Health and version information\r\n * - Search functionality\r\n */\r\n\r\n// Jilebi Plugin Types\r\ninterface ToolRequest {\r\n\t[key: string]: any;\r\n}\r\n\r\ninterface ToolResponse {\r\n\tcontent: Array<{\r\n\t\ttype: 'text' | 'resource';\r\n\t\ttext?: string;\r\n\t\tresource?: string;\r\n\t\tmimeType?: string;\r\n\t}>;\r\n\tisError?: boolean;\r\n}\r\n\r\n// Environment configuration interface\r\ninterface GrafanaConfig {\r\n\turl: string;\r\n\tserviceAccountToken?: string;\r\n\tapiKey?: string;\r\n\tusername?: string;\r\n\tpassword?: string;\r\n}\r\n\r\n// Common interfaces\r\ninterface DashboardSummary {\r\n\tuid: string;\r\n\ttitle: string;\r\n\turl: string;\r\n\ttags: string[];\r\n\tfolderTitle?: string;\r\n\tfolderUid?: string;\r\n}\r\n\r\ninterface DatasourceInfo {\r\n\tuid: string;\r\n\tname: string;\r\n\ttype: string;\r\n\turl: string;\r\n\tisDefault: boolean;\r\n}\r\n\r\ninterface AlertRule {\r\n\tuid: string;\r\n\ttitle: string;\r\n\tcondition: string;\r\n\tnoDataState: string;\r\n\texecErrState: string;\r\n\tfolderUID: string;\r\n}\r\n\r\ninterface ContactPoint {\r\n\tuid: string;\r\n\tname: string;\r\n\ttype?: string;\r\n}\r\n\r\ninterface Incident {\r\n\tid: string;\r\n\ttitle: string;\r\n\tdescription?: string;\r\n\tstatus: string;\r\n\tseverity?: string;\r\n\tcreatedAt: string;\r\n}\r\n\r\ninterface LogEntry {\r\n\ttimestamp: string;\r\n\tline?: string;\r\n\tvalue?: number;\r\n\tlabels: Record<string, string>;\r\n}\r\n\r\ninterface LokiStats {\r\n\tstreams: number;\r\n\tchunks: number;\r\n\tentries: number;\r\n\tbytes: number;\r\n}\r\n\r\n// Utility function to get Grafana configuration\r\nfunction getGrafanaConfig(env: Environment): GrafanaConfig {\r\n\treturn {\r\n\t\turl: env.GRAFANA_URL || 'http://localhost:3000',\r\n\t\tserviceAccountToken: env.GRAFANA_SERVICE_ACCOUNT_TOKEN,\r\n\t\tapiKey: env.GRAFANA_API_KEY,\r\n\t\tusername: env.GRAFANA_USERNAME,\r\n\t\tpassword: env.GRAFANA_PASSWORD\r\n\t};\r\n}\r\n\r\n// Utility function to handle errors consistently\r\nfunction handleError(error: unknown, operation: string): ToolResponse {\r\n\tconst message = error instanceof Error ? error.message : String(error);\r\n\treturn {\r\n\t\tcontent: [{ type: 'text', text: `Error ${operation}: ${message}` }],\r\n\t\tisError: true\r\n\t};\r\n}\r\n\r\n// Utility function to make HTTP requests to Grafana\r\nasync function makeGrafanaRequest(\r\n\tendpoint: string,\r\n\tmethod: 'GET' | 'POST' | 'PUT' | 'DELETE' = 'GET',\r\n\tconfig: GrafanaConfig,\r\n\tbody?: any\r\n): Promise<any> {\r\n\tconst url = `${config.url.replace(/\\/$/, '')}${endpoint}`;\r\n\r\n\tconst headers: Record<string, string> = {\r\n\t\t'Content-Type': 'application/json',\r\n\t\t'Accept': 'application/json'\r\n\t};\r\n\r\n\t// Authentication\r\n\tif (config.serviceAccountToken) {\r\n\t\theaders['Authorization'] = `Bearer ${config.serviceAccountToken}`;\r\n\t} else if (config.apiKey) {\r\n\t\theaders['Authorization'] = `Bearer ${config.apiKey}`;\r\n\t} else if (config.username && config.password) {\r\n\t\tconst auth = btoa(`${config.username}:${config.password}`);\r\n\t\theaders['Authorization'] = `Basic ${auth}`;\r\n\t}\r\n\r\n\tconst response = await fetch(url, {\r\n\t\tmethod,\r\n\t\theaders,\r\n\t\tbody: body ? JSON.stringify(body) : undefined\r\n\t});\r\n\r\n\tif (!response.ok) {\r\n\t\tthrow new Error(`Grafana API error: ${response.status} ${response.statusText}`);\r\n\t}\r\n\r\n\treturn response.json();\r\n}\r\n\r\n// Dashboard Tools\r\nexport async function get_dashboard_by_uid(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\r\n\t// Extract and validate required parameters\r\n\tif (!request.uid) {\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: 'Error: uid parameter is required' }],\r\n\t\t\tisError: true\r\n\t\t};\r\n\t}\r\n\r\n\tconst { uid } = request;\r\n\r\n\ttry {\r\n\t\tconst dashboard = await makeGrafanaRequest(`/api/dashboards/uid/${uid}`, 'GET', config);\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(dashboard, null, 2) }]\r\n\t\t};\r\n\t} catch (error: any) {\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: `Error fetching dashboard: ${error?.message || String(error)}` }],\r\n\t\t\tisError: true\r\n\t\t};\r\n\t}\r\n}\r\n\r\nexport async function update_dashboard(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\r\n\t// Extract parameters with proper validation\r\n\tconst {\r\n\t\tdashboard,\r\n\t\tuid,\r\n\t\toperations,\r\n\t\tfolderUid,\r\n\t\tmessage,\r\n\t\toverwrite = false,\r\n\t\tuserId\r\n\t} = request;\r\n\r\n\ttry {\r\n\t\tlet dashboardData;\r\n\r\n\t\tif (operations && uid) {\r\n\t\t\t// Patch-based update\r\n\t\t\tconst existingDashboard = await makeGrafanaRequest(`/api/dashboards/uid/${uid}`, 'GET', config);\r\n\t\t\tdashboardData = existingDashboard.dashboard;\r\n\r\n\t\t\t// Apply operations (simplified implementation)\r\n\t\t\tfor (const op of operations) {\r\n\t\t\t\tif (op.op === 'replace' && op.path === '$.title') {\r\n\t\t\t\t\tdashboardData.title = op.value;\r\n\t\t\t\t}\r\n\t\t\t\t// Add more operation handling as needed\r\n\t\t\t}\r\n\t\t} else if (dashboard) {\r\n\t\t\tdashboardData = dashboard;\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\tcontent: [{ type: 'text', text: 'Error: Either dashboard object or (uid + operations) must be provided' }],\r\n\t\t\t\tisError: true\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tconst payload: any = {\r\n\t\t\tdashboard: dashboardData,\r\n\t\t\toverwrite\r\n\t\t};\r\n\r\n\t\tif (folderUid) payload.folderUid = folderUid;\r\n\t\tif (message) payload.message = message;\r\n\t\tif (userId) payload.userId = userId;\r\n\r\n\t\tconst result = await makeGrafanaRequest('/api/dashboards/db', 'POST', config, payload);\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\r\n\t\t};\r\n\t} catch (error: any) {\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: `Error updating dashboard: ${error?.message || String(error)}` }],\r\n\t\t\tisError: true\r\n\t\t};\r\n\t}\r\n}\r\n\r\nexport async function search_dashboards(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\tconst { query, limit = 20 } = request;\r\n\r\n\ttry {\r\n\t\tconst params = new URLSearchParams({\r\n\t\t\ttype: 'dash-db',\r\n\t\t\t...(query && { query }),\r\n\t\t\tlimit: limit.toString()\r\n\t\t});\r\n\r\n\t\tconst results = await makeGrafanaRequest(`/api/search?${params}`, 'GET', config);\r\n\r\n\t\tconst dashboards: DashboardSummary[] = results.map((item: any) => ({\r\n\t\t\tuid: item.uid,\r\n\t\t\ttitle: item.title,\r\n\t\t\turl: item.url,\r\n\t\t\ttags: item.tags || [],\r\n\t\t\tfolderTitle: item.folderTitle,\r\n\t\t\tfolderUid: item.folderUid\r\n\t\t}));\r\n\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(dashboards, null, 2) }]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'searching dashboards');\r\n\t}\r\n}\r\n\r\n// Datasource Tools\r\nexport async function get_datasource_by_uid(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\r\n\t// Extract and validate required parameters\r\n\tif (!request.uid) {\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: 'Error: uid parameter is required' }],\r\n\t\t\tisError: true\r\n\t\t};\r\n\t}\r\n\r\n\tconst { uid } = request;\r\n\r\n\ttry {\r\n\t\tconst datasource = await makeGrafanaRequest(`/api/datasources/uid/${uid}`, 'GET', config);\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(datasource, null, 2) }]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'fetching datasource');\r\n\t}\r\n}\r\n\r\nexport async function get_datasource_by_name(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\r\n\t// Extract and validate required parameters\r\n\tif (!request.name) {\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: 'Error: name parameter is required' }],\r\n\t\t\tisError: true\r\n\t\t};\r\n\t}\r\n\r\n\tconst { name } = request;\r\n\r\n\ttry {\r\n\t\tconst datasource = await makeGrafanaRequest(`/api/datasources/name/${encodeURIComponent(name)}`, 'GET', config);\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(datasource, null, 2) }]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'fetching datasource');\r\n\t}\r\n}\r\n\r\n// Prometheus Tools\r\nexport async function query_prometheus(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\r\n\t// Extract and validate required parameters\r\n\tif (!request.datasourceUid) {\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: 'Error: datasourceUid parameter is required' }],\r\n\t\t\tisError: true\r\n\t\t};\r\n\t}\r\n\r\n\tif (!request.query) {\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: 'Error: query parameter is required' }],\r\n\t\t\tisError: true\r\n\t\t};\r\n\t}\r\n\r\n\tconst {\r\n\t\tdatasourceUid,\r\n\t\tquery,\r\n\t\tqueryType = 'range',\r\n\t\tstartTime,\r\n\t\tendTime,\r\n\t\tstepSeconds\r\n\t} = request;\r\n\r\n\ttry {\r\n\t\tconst params = new URLSearchParams({ query });\r\n\r\n\t\tif (queryType === 'range') {\r\n\t\t\tparams.append('start', startTime || new Date(Date.now() - 3600000).toISOString());\r\n\t\t\tparams.append('end', endTime || new Date().toISOString());\r\n\t\t\tparams.append('step', (stepSeconds || 60).toString());\r\n\t\t} else {\r\n\t\t\tparams.append('time', endTime || new Date().toISOString());\r\n\t\t}\r\n\r\n\t\tconst endpoint = queryType === 'range' ? '/api/v1/query_range' : '/api/v1/query';\r\n\t\tconst result = await makeGrafanaRequest(\r\n\t\t\t`/api/datasources/proxy/uid/${datasourceUid}${endpoint}?${params}`,\r\n\t\t\t'GET',\r\n\t\t\tconfig\r\n\t\t);\r\n\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'querying Prometheus');\r\n\t}\r\n}\r\n\r\nexport async function list_prometheus_metric_metadata(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\tconst { datasourceUid, limit, metric } = request;\r\n\r\n\ttry {\r\n\t\tconst params = new URLSearchParams();\r\n\t\tif (limit) params.append('limit', limit.toString());\r\n\t\tif (metric) params.append('metric', metric);\r\n\r\n\t\tconst result = await makeGrafanaRequest(\r\n\t\t\t`/api/datasources/proxy/uid/${datasourceUid}/api/v1/metadata?${params}`,\r\n\t\t\t'GET',\r\n\t\t\tconfig\r\n\t\t);\r\n\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'fetching Prometheus metadata');\r\n\t}\r\n}\r\n\r\nexport async function list_prometheus_metric_names(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\tconst { datasourceUid, regex, limit } = request;\r\n\r\n\ttry {\r\n\t\tconst params = new URLSearchParams();\r\n\t\tif (regex) params.append('match[]', regex);\r\n\r\n\t\tconst result = await makeGrafanaRequest(\r\n\t\t\t`/api/datasources/proxy/uid/${datasourceUid}/api/v1/label/__name__/values?${params}`,\r\n\t\t\t'GET',\r\n\t\t\tconfig\r\n\t\t);\r\n\r\n\t\tlet metrics = result.data || [];\r\n\t\tif (limit) metrics = metrics.slice(0, limit);\r\n\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(metrics, null, 2) }]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'fetching Prometheus metric names');\r\n\t}\r\n}\r\n\r\nexport async function list_prometheus_label_names(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\tconst { datasourceUid, startRfc3339, endRfc3339, limit } = request;\r\n\r\n\ttry {\r\n\t\tconst params = new URLSearchParams();\r\n\t\tif (startRfc3339) params.append('start', startRfc3339);\r\n\t\tif (endRfc3339) params.append('end', endRfc3339);\r\n\r\n\t\tconst result = await makeGrafanaRequest(\r\n\t\t\t`/api/datasources/proxy/uid/${datasourceUid}/api/v1/labels?${params}`,\r\n\t\t\t'GET',\r\n\t\t\tconfig\r\n\t\t);\r\n\r\n\t\tlet labels = result.data || [];\r\n\t\tif (limit) labels = labels.slice(0, limit);\r\n\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(labels, null, 2) }]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'fetching Prometheus label names');\r\n\t}\r\n}\r\n\r\nexport async function list_prometheus_label_values(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\r\n\t// Extract and validate required parameters\r\n\tif (!request.datasourceUid) {\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: 'Error: datasourceUid parameter is required' }],\r\n\t\t\tisError: true\r\n\t\t};\r\n\t}\r\n\r\n\tif (!request.labelName) {\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: 'Error: labelName parameter is required' }],\r\n\t\t\tisError: true\r\n\t\t};\r\n\t}\r\n\r\n\tconst { datasourceUid, labelName, startRfc3339, endRfc3339, limit } = request;\r\n\r\n\ttry {\r\n\t\tconst params = new URLSearchParams();\r\n\t\tif (startRfc3339) params.append('start', startRfc3339);\r\n\t\tif (endRfc3339) params.append('end', endRfc3339);\r\n\r\n\t\tconst result = await makeGrafanaRequest(\r\n\t\t\t`/api/datasources/proxy/uid/${datasourceUid}/api/v1/label/${labelName}/values?${params}`,\r\n\t\t\t'GET',\r\n\t\t\tconfig\r\n\t\t);\r\n\r\n\t\tlet values = result.data || [];\r\n\t\tif (limit) values = values.slice(0, limit);\r\n\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(values, null, 2) }]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'fetching Prometheus label values');\r\n\t}\r\n}\r\n\r\n// Loki Tools\r\nexport async function query_loki_logs(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\r\n\t// Extract and validate required parameters\r\n\tif (!request.datasourceUid) {\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: 'Error: datasourceUid parameter is required' }],\r\n\t\t\tisError: true\r\n\t\t};\r\n\t}\r\n\r\n\tif (!request.logql) {\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: 'Error: logql parameter is required' }],\r\n\t\t\tisError: true\r\n\t\t};\r\n\t}\r\n\r\n\tconst {\r\n\t\tdatasourceUid,\r\n\t\tlogql,\r\n\t\tlimit = 10,\r\n\t\tstartRfc3339,\r\n\t\tendRfc3339,\r\n\t\tdirection = 'backward'\r\n\t} = request;\r\n\r\n\ttry {\r\n\t\tconst params = new URLSearchParams({\r\n\t\t\tquery: logql,\r\n\t\t\tlimit: limit.toString(),\r\n\t\t\tdirection\r\n\t\t});\r\n\r\n\t\tif (startRfc3339) params.append('start', startRfc3339);\r\n\t\tif (endRfc3339) params.append('end', endRfc3339);\r\n\r\n\t\tconst result = await makeGrafanaRequest(\r\n\t\t\t`/api/datasources/proxy/uid/${datasourceUid}/loki/api/v1/query_range?${params}`,\r\n\t\t\t'GET',\r\n\t\t\tconfig\r\n\t\t);\r\n\r\n\t\t// Transform to LogEntry format\r\n\t\tconst logs: LogEntry[] = [];\r\n\t\tif (result.data && result.data.result) {\r\n\t\t\tfor (const stream of result.data.result) {\r\n\t\t\t\tfor (const entry of stream.values || []) {\r\n\t\t\t\t\tlogs.push({\r\n\t\t\t\t\t\ttimestamp: entry[0],\r\n\t\t\t\t\t\tline: entry[1],\r\n\t\t\t\t\t\tlabels: stream.stream || {}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(logs, null, 2) }]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'querying Loki logs');\r\n\t}\r\n}\r\n\r\nexport async function list_loki_label_names(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\tconst { datasourceUid, startRfc3339, endRfc3339 } = request;\r\n\r\n\ttry {\r\n\t\tconst params = new URLSearchParams();\r\n\t\tif (startRfc3339) params.append('start', startRfc3339);\r\n\t\tif (endRfc3339) params.append('end', endRfc3339);\r\n\r\n\t\tconst result = await makeGrafanaRequest(\r\n\t\t\t`/api/datasources/proxy/uid/${datasourceUid}/loki/api/v1/labels?${params}`,\r\n\t\t\t'GET',\r\n\t\t\tconfig\r\n\t\t);\r\n\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(result.data || [], null, 2) }]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'fetching Loki label names');\r\n\t}\r\n}\r\n\r\nexport async function list_loki_label_values(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\r\n\t// Extract and validate required parameters\r\n\tif (!request.datasourceUid) {\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: 'Error: datasourceUid parameter is required' }],\r\n\t\t\tisError: true\r\n\t\t};\r\n\t}\r\n\r\n\tif (!request.labelName) {\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: 'Error: labelName parameter is required' }],\r\n\t\t\tisError: true\r\n\t\t};\r\n\t}\r\n\r\n\tconst { datasourceUid, labelName, startRfc3339, endRfc3339 } = request;\r\n\r\n\ttry {\r\n\t\tconst params = new URLSearchParams();\r\n\t\tif (startRfc3339) params.append('start', startRfc3339);\r\n\t\tif (endRfc3339) params.append('end', endRfc3339);\r\n\r\n\t\tconst result = await makeGrafanaRequest(\r\n\t\t\t`/api/datasources/proxy/uid/${datasourceUid}/loki/api/v1/label/${labelName}/values?${params}`,\r\n\t\t\t'GET',\r\n\t\t\tconfig\r\n\t\t);\r\n\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(result.data || [], null, 2) }]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'fetching Loki label values');\r\n\t}\r\n}\r\n\r\nexport async function query_loki_stats(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\tconst { datasourceUid, logql, startRfc3339, endRfc3339 } = request;\r\n\r\n\ttry {\r\n\t\tconst params = new URLSearchParams({ query: logql });\r\n\t\tif (startRfc3339) params.append('start', startRfc3339);\r\n\t\tif (endRfc3339) params.append('end', endRfc3339);\r\n\r\n\t\tconst result = await makeGrafanaRequest(\r\n\t\t\t`/api/datasources/proxy/uid/${datasourceUid}/loki/api/v1/index/stats?${params}`,\r\n\t\t\t'GET',\r\n\t\t\tconfig\r\n\t\t);\r\n\r\n\t\tconst stats: LokiStats = {\r\n\t\t\tstreams: result.streams || 0,\r\n\t\t\tchunks: result.chunks || 0,\r\n\t\t\tentries: result.entries || 0,\r\n\t\t\tbytes: result.bytes || 0\r\n\t\t};\r\n\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(stats, null, 2) }]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'fetching Loki stats');\r\n\t}\r\n}\r\n\r\n// Alerting Tools\r\nexport async function list_alert_rules(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\tconst { folderUid, limit } = request;\r\n\r\n\ttry {\r\n\t\tconst params = new URLSearchParams();\r\n\t\tif (folderUid) params.append('folderUID', folderUid);\r\n\r\n\t\tconst result = await makeGrafanaRequest(`/api/ruler/grafana/api/v1/rules?${params}`, 'GET', config);\r\n\r\n\t\tconst rules: AlertRule[] = [];\r\n\t\tObject.values(result).forEach((folder: any) => {\r\n\t\t\tfolder.forEach((group: any) => {\r\n\t\t\t\tgroup.rules?.forEach((rule: any) => {\r\n\t\t\t\t\trules.push({\r\n\t\t\t\t\t\tuid: rule.uid,\r\n\t\t\t\t\t\ttitle: rule.title,\r\n\t\t\t\t\t\tcondition: rule.condition,\r\n\t\t\t\t\t\tnoDataState: rule.noDataState,\r\n\t\t\t\t\t\texecErrState: rule.execErrState,\r\n\t\t\t\t\t\tfolderUID: rule.folderUID\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tconst limitedRules = limit ? rules.slice(0, limit) : rules;\r\n\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(limitedRules, null, 2) }]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'fetching alert rules');\r\n\t}\r\n}\r\n\r\nexport async function get_alert_rule_by_uid(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\tconst { uid } = request;\r\n\r\n\ttry {\r\n\t\tconst result = await makeGrafanaRequest(`/api/v1/provisioning/alert-rules/${uid}`, 'GET', config);\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'fetching alert rule');\r\n\t}\r\n}\r\n\r\nexport async function list_contact_points(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\tconst { name, limit } = request;\r\n\r\n\ttry {\r\n\t\tconst params = new URLSearchParams();\r\n\t\tif (name) params.append('name', name);\r\n\r\n\t\tconst result = await makeGrafanaRequest(`/api/v1/provisioning/contact-points?${params}`, 'GET', config);\r\n\r\n\t\tconst contactPoints: ContactPoint[] = result.map((cp: any) => ({\r\n\t\t\tuid: cp.uid,\r\n\t\t\tname: cp.name,\r\n\t\t\ttype: cp.type\r\n\t\t}));\r\n\r\n\t\tconst limitedContactPoints = limit ? contactPoints.slice(0, limit) : contactPoints;\r\n\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(limitedContactPoints, null, 2) }]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'fetching contact points');\r\n\t}\r\n}\r\n\r\n// Incident Management Tools\r\nexport async function list_incidents(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\tconst { status, limit } = request;\r\n\r\n\ttry {\r\n\t\tconst params = new URLSearchParams();\r\n\t\tif (status) params.append('status', status);\r\n\t\tif (limit) params.append('limit', limit.toString());\r\n\r\n\t\tconst result = await makeGrafanaRequest(`/api/plugins/grafana-incident-app/resources/api/v1/IncidentsService.SearchIncidents?${params}`, 'GET', config);\r\n\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(result.incidents || [], null, 2) }]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'fetching incidents');\r\n\t}\r\n}\r\n\r\nexport async function create_incident(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\r\n\t// Extract and validate required parameters\r\n\tif (!request.title) {\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: 'Error: title parameter is required' }],\r\n\t\t\tisError: true\r\n\t\t};\r\n\t}\r\n\r\n\tconst { title, description, severity } = request;\r\n\r\n\ttry {\r\n\t\tconst payload = {\r\n\t\t\ttitle,\r\n\t\t\tdescription: description || '',\r\n\t\t\tseverity: severity || 'medium'\r\n\t\t};\r\n\r\n\t\tconst result = await makeGrafanaRequest(\r\n\t\t\t'/api/plugins/grafana-incident-app/resources/api/v1/IncidentsService.CreateIncident',\r\n\t\t\t'POST',\r\n\t\t\tconfig,\r\n\t\t\tpayload\r\n\t\t);\r\n\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'creating incident');\r\n\t}\r\n}\r\n\r\nexport async function get_incident(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\tconst { id } = request;\r\n\r\n\ttry {\r\n\t\tconst result = await makeGrafanaRequest(\r\n\t\t\t`/api/plugins/grafana-incident-app/resources/api/v1/IncidentsService.GetIncident?incidentID=${id}`,\r\n\t\t\t'GET',\r\n\t\t\tconfig\r\n\t\t);\r\n\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'fetching incident');\r\n\t}\r\n}\r\n\r\nexport async function add_activity_to_incident(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\tconst { id, message } = request;\r\n\r\n\ttry {\r\n\t\tconst payload = {\r\n\t\t\tincidentID: id,\r\n\t\t\tactivityItem: {\r\n\t\t\t\tbody: message,\r\n\t\t\t\teventType: 'userNote'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst result = await makeGrafanaRequest(\r\n\t\t\t'/api/plugins/grafana-incident-app/resources/api/v1/IncidentsService.AddActivity',\r\n\t\t\t'POST',\r\n\t\t\tconfig,\r\n\t\t\tpayload\r\n\t\t);\r\n\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'adding activity to incident');\r\n\t}\r\n}\r\n\r\n// OnCall Tools\r\nexport async function list_oncall_schedules(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\tconst { name, limit } = request;\r\n\r\n\ttry {\r\n\t\tconst params = new URLSearchParams();\r\n\t\tif (name) params.append('name', name);\r\n\r\n\t\tconst result = await makeGrafanaRequest(\r\n\t\t\t`/api/plugins/grafana-oncall-app/resources/api/internal/v1/schedules/?${params}`,\r\n\t\t\t'GET',\r\n\t\t\tconfig\r\n\t\t);\r\n\r\n\t\tlet schedules = result.results || [];\r\n\t\tif (limit) schedules = schedules.slice(0, limit);\r\n\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(schedules, null, 2) }]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'fetching OnCall schedules');\r\n\t}\r\n}\r\n\r\nexport async function get_oncall_shift(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\tconst { scheduleId, shiftId } = request;\r\n\r\n\ttry {\r\n\t\tconst result = await makeGrafanaRequest(\r\n\t\t\t`/api/plugins/grafana-oncall-app/resources/api/internal/v1/schedules/${scheduleId}/shifts/${shiftId}/`,\r\n\t\t\t'GET',\r\n\t\t\tconfig\r\n\t\t);\r\n\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'fetching OnCall shift');\r\n\t}\r\n}\r\n\r\nexport async function get_current_oncall_users(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\tconst { scheduleId } = request;\r\n\r\n\ttry {\r\n\t\tconst result = await makeGrafanaRequest(\r\n\t\t\t`/api/plugins/grafana-oncall-app/resources/api/internal/v1/schedules/${scheduleId}/current-oncall/`,\r\n\t\t\t'GET',\r\n\t\t\tconfig\r\n\t\t);\r\n\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'fetching current on-call users');\r\n\t}\r\n}\r\n\r\n// Admin Tools\r\nexport async function get_health(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\r\n\ttry {\r\n\t\tconst result = await makeGrafanaRequest('/api/health', 'GET', config);\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'fetching health status');\r\n\t}\r\n}\r\n\r\nexport async function get_version(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\r\n\ttry {\r\n\t\tconst result = await makeGrafanaRequest('/api/frontend/settings', 'GET', config);\r\n\t\treturn {\r\n\t\t\tcontent: [{\r\n\t\t\t\ttype: 'text',\r\n\t\t\t\ttext: JSON.stringify({\r\n\t\t\t\t\tversion: result.buildInfo?.version,\r\n\t\t\t\t\tcommit: result.buildInfo?.commit,\r\n\t\t\t\t\tbuildstamp: result.buildInfo?.buildstamp,\r\n\t\t\t\t\tedition: result.buildInfo?.edition\r\n\t\t\t\t}, null, 2)\r\n\t\t\t}]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'fetching version info');\r\n\t}\r\n}\r\n\r\n// Search Tools\r\nexport async function search(request: ToolRequest, env: any): Promise<ToolResponse> {\r\n\tconst config = getGrafanaConfig(env);\r\n\tconst { query, type, limit = 20 } = request;\r\n\r\n\ttry {\r\n\t\tconst params = new URLSearchParams({\r\n\t\t\tlimit: limit.toString(),\r\n\t\t\t...(query && { query }),\r\n\t\t\t...(type && { type })\r\n\t\t});\r\n\r\n\t\tconst result = await makeGrafanaRequest(`/api/search?${params}`, 'GET', config);\r\n\r\n\t\treturn {\r\n\t\t\tcontent: [{ type: 'text', text: JSON.stringify(result, null, 2) }]\r\n\t\t};\r\n\t} catch (error) {\r\n\t\treturn handleError(error, 'performing search');\r\n\t}\r\n}\r\n"],"names":[],"mappings":"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"}
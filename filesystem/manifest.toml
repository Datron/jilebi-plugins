name = "filesystem"
version = "1.0.0"
homepage = "jilebi.ai"
creator = "jilebi"
contact = "support@jilebi.ai"

[resources]

[prompts]

[tools.read-text-file]
name = "read-text-file"
description = "Read the complete contents of a file as text with optional head/tail support"
input_schema = { type = "object", properties = { path = { type = "string", description = "File path to read" }, head = { type = "number", description = "Read only first N lines", minimum = 1 }, tail = { type = "number", description = "Read only last N lines", minimum = 1 } }, required = [
	"path",
] }
function = "read_text_file"
[tools.read-text-file.permissions]
read_dirs = ["user_defined"]

[tools.read-media-file]
name = "read-media-file"
description = "Read an image or audio file and return base64 encoded data"
input_schema = { type = "object", properties = { path = { type = "string", description = "Path to media file" } }, required = [
	"path",
] }
function = "read_media_file"
[tools.read-media-file.permissions]
read_dirs = ["user_defined"]

[tools.read-multiple-files]
name = "read-multiple-files"
description = "Read multiple files simultaneously"
input_schema = { type = "object", properties = { paths = { type = "array", items = { type = "string" }, description = "Array of file paths to read" } }, required = [
	"paths",
] }
function = "read_multiple_files"
[tools.read-multiple-files.permissions]
read_dirs = ["user_defined"]

[tools.write-file]
name = "write-file"
description = "Create a new file or overwrite existing file with content"
input_schema = { type = "object", properties = { path = { type = "string", description = "File path to write" }, content = { type = "string", description = "Content to write to file" } }, required = [
	"path",
	"content",
] }
function = "write_file"
[tools.write-file.permissions]
write_dirs = ["user_defined"]

[tools.edit-file]
name = "edit-file"
description = "Make selective edits to a file using pattern matching"
input_schema = { type = "object", properties = { path = { type = "string", description = "File path to edit" }, edits = { type = "array", items = { type = "object", properties = { oldText = { type = "string", description = "Text to search for" }, newText = { type = "string", description = "Text to replace with" } }, required = [
	"oldText",
	"newText",
] }, description = "Array of edit operations" }, dryRun = { type = "boolean", description = "Preview changes without applying", default = false } }, required = [
	"path",
	"edits",
] }
function = "edit_file"
[tools.edit-file.permissions]
read_dirs = ["user_defined"]
write_dirs = ["user_defined"]

[tools.create-directory]
name = "create-directory"
description = "Create a new directory or ensure directory exists"
input_schema = { type = "object", properties = { path = { type = "string", description = "Directory path to create" } }, required = [
	"path",
] }
function = "create_directory"
[tools.create-directory.permissions]
write_dirs = ["user_defined"]

[tools.list-directory]
name = "list-directory"
description = "List contents of a directory"
input_schema = { type = "object", properties = { path = { type = "string", description = "Directory path to list" } }, required = [
	"path",
] }
function = "list_directory"
[tools.list-directory.permissions]
read_dirs = ["user_defined"]

[tools.list-directory-with-sizes]
name = "list-directory-with-sizes"
description = "List directory contents with file sizes and sorting options"
input_schema = { type = "object", properties = { path = { type = "string", description = "Directory path to list" }, sortBy = { type = "string", enum = [
	"name",
	"size",
], default = "name", description = "Sort entries by name or size" } }, required = [
	"path",
] }
function = "list_directory_with_sizes"
[tools.list-directory-with-sizes.permissions]
read_dirs = ["user_defined"]

[tools.directory-tree]
name = "directory-tree"
description = "Get recursive tree view of directory structure as JSON"
input_schema = { type = "object", properties = { path = { type = "string", description = "Root directory path for tree" } }, required = [
	"path",
] }
function = "directory_tree"
[tools.directory-tree.permissions]
read_dirs = ["user_defined"]

[tools.move-file]
name = "move-file"
description = "Move or rename files and directories"
input_schema = { type = "object", properties = { source = { type = "string", description = "Source path" }, destination = { type = "string", description = "Destination path" } }, required = [
	"source",
	"destination",
] }
function = "move_file"
[tools.move-file.permissions]
read_dirs = ["user_defined"]
write_dirs = ["user_defined"]

[tools.search-files]
name = "search-files"
description = "Recursively search for files matching a pattern"
input_schema = { type = "object", properties = { path = { type = "string", description = "Starting directory for search" }, pattern = { type = "string", description = "Search pattern (case-insensitive)" }, excludePatterns = { type = "array", items = { type = "string" }, default = [
], description = "Patterns to exclude from search" } }, required = [
	"path",
	"pattern",
] }
function = "search_files"
[tools.search-files.permissions]
read_dirs = ["user_defined"]

[tools.get-file-info]
name = "get-file-info"
description = "Get detailed metadata about a file or directory"
input_schema = { type = "object", properties = { path = { type = "string", description = "Path to get info for" } }, required = [
	"path",
] }
function = "get_file_info"
[tools.get-file-info.permissions]
read_dirs = ["user_defined"]
